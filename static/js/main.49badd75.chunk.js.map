{"version":3,"sources":["Letter.js","MyString.js","App.js","serviceWorker.js","index.js"],"names":["Letter","_ref","letter","styles","color","react_default","a","createElement","className","style","MyString","myString","this","props","map","index","src_Letter_0","key","Component","defaultProps","splitText","split","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","colorString","Array","length","fill","randColor","assertThisInitialized","inst","i","console","log","state","setInterval","slice","Math","floor","random","setState","randInd","allColors","src_MyString_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.49badd75.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Letter.css';\r\n\r\nconst Letter = ({letter,color}) => {\r\n    const styles = { color: color};\r\n    return (\r\n      <div className = \"letter\" style={styles}>\r\n          {letter}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  Letter.propTypes = {\r\n    letter:PropTypes.string,\r\n    color: PropTypes.string,\r\n  };\r\n  export default Letter;","import React, { Component} from 'react';\r\nimport Letter from './Letter';\r\nimport './MyString.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass MyString extends Component{\r\n    static defaultProps = {\r\n        myString:[\r\n            {letter:'r',\r\n            color: 'black'},\r\n            {letter:'w',\r\n            color:'red'},\r\n            {letter:'g',\r\n            color:\"green\"}]\r\n    }\r\n    static propTypes = {\r\n        myString: PropTypes.arrayOf(PropTypes.object)\r\n    }\r\n    render(){\r\n        const myString = this.props.myString.map((letter,index) => (\r\n            <Letter\r\n              key={index}\r\n              letter={letter.letter}\r\n              color={letter.color}\r\n            />\r\n          ));\r\n        return(\r\n            <div className=\"myString\">\r\n                {myString}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n   export default MyString;","import React, { Component } from 'react';\nimport MyString from\"./MyString\";\nimport './App.css';\n\nconst Text = \"Lorem ipsum is a pseudo-Latin text used in web design\";\nconst splitText = Text.split('');\n\nclass App extends Component {\n  \n  constructor(props) {\n    super(props);\n    const colorString = Array(splitText.length).fill().map(this.randColor,this);\n    const myString = splitText.map(function(inst, i){\n      return {\n        letter: inst,\n        color:  colorString[i]\n      }\n    });\n    console.log(myString);\n    this.state = {myString};\n      /* one div changes color*/\n      setInterval(() => {\n        const myString = this.state.myString.slice();\n        const randIndex = Math.floor(Math.random() * myString.length);\n        myString[randIndex].color = this.randColor();\n        this.setState({myString});\n      }, 200);\n\n        /* all divs change colors*/\n      // setInterval(() => {\n      //   const myString = this.state.myString.map((inst)=>{\n      //       const allColors = [...this.props.allColors];\n      //       const color = allColors[Math.floor(Math.random() * this.props.allColors.length)];\n      //       return {letter:inst.letter, color:color}\n      //   });\n      //     this.setState({myString});\n      // }, 300);\n\n    }\n      randColor(){\n        let randInd = Math.floor(Math.random() * this.props.allColors.length);\n        return this.props.allColors[randInd];\n    }\n\n    render() {\n      return (\n        <div className=\"App\">\n            <MyString myString={this.state.myString} />\n        </div>\n      );\n    }\n  }\n  \n  App.defaultProps = {\n    allColors: [\"AliceBlue\",\"AntiqueWhite\",\"Aqua\",\"Aquamarine\",\"Azure\",\"Beige\",\"Bisque\",\"Black\",\"BlanchedAlmond\",\n                \"Blue\",\"BlueViolet\",\"Brown\",\"BurlyWood\",\"CadetBlue\",\"Chartreuse\",\"Chocolate\",\n                \"Coral\",\"CornflowerBlue\",\"Cornsilk\",\"Crimson\",\"Cyan\",\"DarkBlue\",\"DarkCyan\",\"DarkGoldenRod\",\n                \"DarkGray\",\"DarkGrey\",\"DarkGreen\",\"DarkKhaki\",\"DarkMagenta\",\"DarkOliveGreen\",\"Darkorange\",\n                \"DarkOrchid\",\"DarkRed\",\"DarkSalmon\",\"DarkSeaGreen\",\"DarkSlateBlue\",\"DarkSlateGray\",\"DarkSlateGrey\",\n                \"DarkTurquoise\",\"DarkViolet\",\"DeepPink\",\"DeepSkyBlue\",\"DimGray\",\"DimGrey\",\"DodgerBlue\",\n                \"FireBrick\",\"FloralWhite\",\"ForestGreen\",\"Fuchsia\",\"Gainsboro\",\"GhostWhite\",\"Gold\",\"GoldenRod\",\n                \"Gray\",\"Grey\",\"Green\",\"GreenYellow\",\"HoneyDew\",\"HotPink\",\"IndianRed\",\"Indigo\",\"Ivory\",\"Khaki\",\n                \"Lavender\",\"LavenderBlush\",\"LawnGreen\",\"LemonChiffon\",\"LightBlue\",\"LightCoral\",\"LightCyan\",\n                \"LightGoldenRodYellow\",\"LightGray\",\"LightGrey\",\"LightGreen\",\"LightPink\",\"LightSalmon\",\n                \"LightSeaGreen\",\"LightSkyBlue\",\"LightSlateGray\",\"LightSlateGrey\",\"LightSteelBlue\",\"LightYellow\",\n                \"Lime\",\"LimeGreen\",\"Linen\",\"Magenta\",\"Maroon\",\"MediumAquaMarine\",\"MediumBlue\",\"MediumOrchid\",\n                \"MediumPurple\",\"MediumSeaGreen\",\"MediumSlateBlue\",\"MediumSpringGreen\",\"MediumTurquoise\",\n                \"MediumVioletRed\",\"MidnightBlue\",\"MintCream\",\"MistyRose\",\"Moccasin\",\"NavajoWhite\",\"Navy\",\n                \"OldLace\",\"Olive\",\"OliveDrab\",\"Orange\",\"OrangeRed\",\"Orchid\",\"PaleGoldenRod\",\"PaleGreen\",\n                \"PaleTurquoise\",\"PaleVioletRed\",\"PapayaWhip\",\"PeachPuff\",\"Peru\",\"Pink\",\"Plum\",\"PowderBlue\",\n                \"Purple\",\"Red\",\"RosyBrown\",\"RoyalBlue\",\"SaddleBrown\",\"Salmon\",\"SandyBrown\",\"SeaGreen\",\n                \"SeaShell\",\"Sienna\",\"Silver\",\"SkyBlue\",\"SlateBlue\",\"SlateGray\",\"SlateGrey\",\"Snow\",\"SpringGreen\",\n                \"SteelBlue\",\"Tan\",\"Teal\",\"Thistle\",\"Tomato\",\"Turquoise\",\"Violet\",\"Wheat\",\"White\",\"WhiteSmoke\",\n                \"Yellow\",\"YellowGreen\"]\n  };\n  \n  export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}